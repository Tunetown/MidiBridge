import unittest
import json
from os import stat, path

# Import subject under test
from lib.pymidibridge.pymidibridge import *
from .mocks import *

TEST_DATA_FOLDER = "/project/test/data/"


class TestChecksumWithReferenceData(unittest.TestCase):

    def test_write_ref_data(self):
        self._test_write_ref_data(
            file_path = TEST_DATA_FOLDER + "pmb_checksum_1.json",
            data = b'\x00'
        )

        self._test_write_ref_data(
            file_path = TEST_DATA_FOLDER + "pmb_checksum_2.json",
            data = b'\xff\xab\x77\x6c\x99\x00\x00\x00\x66'
        )

        self._test_write_ref_data(
            file_path = TEST_DATA_FOLDER + "pmb_checksum_3.json",
            data = b'\x77\x88\x99\xac\xdc\xa4\x52\x87\x98\x09\x90\x65\x4e\x3e\xe3\x2a\x6e\xff\xff'
        )

        self._test_write_ref_data(
            file_path = TEST_DATA_FOLDER + "pmb_checksum_4.json",
            data = b'\x77\x88\x99\xac\xdc\xa4\x52\x87\x98\x09\x90\x65\x4e\x3e\xe3\x2a\x6e\xff\xff\x77\x88\x99\xac\xdc\xa4\x52\x87\x98\x09\x90\x65\x4e\x3e\xe3\x2a\x6e\xff\xff\x77\x88\x99\xac\xdc\xa4\x52\x87\x98\x09\x90\x65\x4e\x3e\xe3\x2a\x6e\xff\xff'
        )

        self._test_write_ref_data(
            file_path = TEST_DATA_FOLDER + "pmb_checksum_5.json",
            data = b'\x77\x88\x99\xac\xdc\xa4\x52\x87\x98\x09\x90\x65\x4e\x3e\xe3\x2a\x6e\xff\xff\x66\x77\x88\x99\xac\xdc\xa4\x52\x87\x98\x09\x90\x65\x4e\x3e\xe3\x2a\x6e\xff\xff\x99\x88\x99\xac\xdc\xa4\x52\x87\x98\x09\x90\x65\x4e\x3e\xe3\x2a\x6e\xff\xff\x66\x77\x88\x99\xac\xdc\xa4\x52\x87\x98\x09\x90\x65\x4e\x3e\xe3\x2a\x6e\xff\xff\x99\x88\x99\xac\xdc\xa4\x52\x87\x98\x09\x90\x65\x4e\x3e\xe3\x2a\x6e\xff\xff\x66\x77\x88\x99\xac\xdc\xa4\x52\x87\x98\x09\x90\x65\x4e\x3e\xe3\x2a\x6e\xff\xff\x99\x88\x99\xac\xdc\xa4\x52\x87\x98\x09\x90\x65\x4e\x3e\xe3\x2a\x6e\xff\xff\x66\x77\x88\x99\xac\xdc\xa4\x52\x87\x98\x09\x90\x65\x4e\x3e\xe3\x2a\x6e\xff\xff\x99\x88\x99\xac\xdc\xa4\x52\x87\x98\x09\x90\x65\x4e\x3e\xe3\x2a\x6e\xff\xff\x66\x77\x88\x99\xac\xdc\xa4\x52\x87\x98\x09\x90\x65\x4e\x3e\xe3\x2a\x6e\xff\xff\x99\x88\x99\xac\xdc\xa4\x52\x87\x98\x09\x90\x65\x4e\x3e\xe3\x2a\x6e\xff\xff\x66\x77\x88\x99\xac\xdc\xa4\x52\x87\x98\x09\x90\x65\x4e\x3e\xe3\x2a\x6e\xff\xff\x99'
        )

    def _test_write_ref_data(self, file_path, data):
        if path.exists(file_path):
            return

        bridge = PyMidiBridge(None, None)

        checksum = bridge._get_checksum(data)

        handle = open(file_path, "w")
        handle.write(json.dumps(list(checksum)))
        handle.close()

        print("Successfully written reference file " + file_path + ": " + repr(checksum))


##############################################################################################################################


    def test_against_ref_data(self):
        self._test_against_ref_data(
            file_path = TEST_DATA_FOLDER + "pmb_checksum_1.json",
            data = b'\x00'
        )

        self._test_against_ref_data(
            file_path = TEST_DATA_FOLDER + "pmb_checksum_2.json",
            data = b'\xff\xab\x77\x6c\x99\x00\x00\x00\x66'
        )

        self._test_against_ref_data(
            file_path = TEST_DATA_FOLDER + "pmb_checksum_3.json",
            data = b'\x77\x88\x99\xac\xdc\xa4\x52\x87\x98\x09\x90\x65\x4e\x3e\xe3\x2a\x6e\xff\xff'
        )

        self._test_against_ref_data(
            file_path = TEST_DATA_FOLDER + "pmb_checksum_4.json",
            data = b'\x77\x88\x99\xac\xdc\xa4\x52\x87\x98\x09\x90\x65\x4e\x3e\xe3\x2a\x6e\xff\xff\x77\x88\x99\xac\xdc\xa4\x52\x87\x98\x09\x90\x65\x4e\x3e\xe3\x2a\x6e\xff\xff\x77\x88\x99\xac\xdc\xa4\x52\x87\x98\x09\x90\x65\x4e\x3e\xe3\x2a\x6e\xff\xff'
        )

        self._test_against_ref_data(
            file_path = TEST_DATA_FOLDER + "pmb_checksum_5.json",
            data = b'\x77\x88\x99\xac\xdc\xa4\x52\x87\x98\x09\x90\x65\x4e\x3e\xe3\x2a\x6e\xff\xff\x66\x77\x88\x99\xac\xdc\xa4\x52\x87\x98\x09\x90\x65\x4e\x3e\xe3\x2a\x6e\xff\xff\x99\x88\x99\xac\xdc\xa4\x52\x87\x98\x09\x90\x65\x4e\x3e\xe3\x2a\x6e\xff\xff\x66\x77\x88\x99\xac\xdc\xa4\x52\x87\x98\x09\x90\x65\x4e\x3e\xe3\x2a\x6e\xff\xff\x99\x88\x99\xac\xdc\xa4\x52\x87\x98\x09\x90\x65\x4e\x3e\xe3\x2a\x6e\xff\xff\x66\x77\x88\x99\xac\xdc\xa4\x52\x87\x98\x09\x90\x65\x4e\x3e\xe3\x2a\x6e\xff\xff\x99\x88\x99\xac\xdc\xa4\x52\x87\x98\x09\x90\x65\x4e\x3e\xe3\x2a\x6e\xff\xff\x66\x77\x88\x99\xac\xdc\xa4\x52\x87\x98\x09\x90\x65\x4e\x3e\xe3\x2a\x6e\xff\xff\x99\x88\x99\xac\xdc\xa4\x52\x87\x98\x09\x90\x65\x4e\x3e\xe3\x2a\x6e\xff\xff\x66\x77\x88\x99\xac\xdc\xa4\x52\x87\x98\x09\x90\x65\x4e\x3e\xe3\x2a\x6e\xff\xff\x99\x88\x99\xac\xdc\xa4\x52\x87\x98\x09\x90\x65\x4e\x3e\xe3\x2a\x6e\xff\xff\x66\x77\x88\x99\xac\xdc\xa4\x52\x87\x98\x09\x90\x65\x4e\x3e\xe3\x2a\x6e\xff\xff\x99'
        )


    def _test_against_ref_data(self, file_path, data):
        if not path.exists(file_path):
            return

        bridge = PyMidiBridge(None, None)

        # Load messages
        handle = open(file_path, "r")
        data_json = handle.read()
        handle.close()
        exp_checksum = bytes(json.loads(data_json))
        
        checksum = bridge._get_checksum(data)

        self.assertEqual(checksum, exp_checksum)
        
